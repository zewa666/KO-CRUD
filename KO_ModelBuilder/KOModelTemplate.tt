<#@ template debug="false" hostspecific="true" language="C#" #>
<#@include file="Manager.ttinclude" #>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)DemoTest\bin\Debug\DemoTest.exe" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="DemoTest.Models" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".js" #>
 
<#
var list = new List<Type>();
	
foreach (Type type in System.Reflection.Assembly.GetAssembly(typeof(KO_BaseModel)).GetTypes())
{
	if (type.IsAbstract) continue;	// only generate JS viewmodels for non-abstract classes
    if (type.IsSubclassOf(typeof(KO_BaseModel)))
		list.Add(type);
}

foreach (var type in list)
{
manager.StartNewFile(type.Name + ".js");
#>
var <#= type.Name #> = function (context) {
	var self = this;
	self.koContext = null;

	// Generated Modelobservables
<#
foreach (var prop in type.GetProperties())
{ #>
	self.<#= prop.Name #> = ko.observable();
<#}#>
	// END

	// Constructor
	self.init = function (context) {

	};

	// Generated ModelMethods
<#foreach (var method in type.GetMethods(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public))
{
    if (method.Name.StartsWith("set_") || method.Name.StartsWith("get_"))
        continue;

    System.Attribute[] attrs = System.Attribute.GetCustomAttributes(method, typeof(ModelMethodDescriber));
	if (((ModelMethodDescriber)attrs[0]).Description != null) { #>
	// <#= ((ModelMethodDescriber)attrs[0]).Description #>
    <# }#>
self.<#= method.Name #> = <# if (((ModelMethodDescriber)attrs[0]).koComputed == true) { #>ko.computed(<# } #>function() {
		// CODE HERE
	}<# if (((ModelMethodDescriber)attrs[0]).koComputed == true) { #>)<# } #>;
<#}#>
	// END

	self.init();
}
<# 
manager.EndBlock();
}
manager.Process(true);#>